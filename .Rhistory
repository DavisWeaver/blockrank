} else {
stop("ASA_id not found")
}
nodes <- out[[1]]
edges <- out[[2]]
#Load the blacklist and whitelist
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
nodes <- nodes %>%
filter(!(id %in% whitelist),
amount > min_holding)
#don't filter out the algo transactions - they are on an entirely different scale
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black",
from %in% nodes$id & to %in% nodes$id)
#recalculate degree for the new edges
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree)
#filter nodes to remove any that aren't the minimum_degree
edges_mat <- edges %>% select(from,to) %>% as.matrix()
g <- igraph::graph_from_edgelist(edges_mat)
return(list(nodes, edges, g))
}
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
decimal = 3,
min_holding = 100000,
blacklist =  "data/blacklist.csv",
minimum_tx = 1000,
minimum_degree = 1,
force_update = FALSE,
ncores = 1) {
#define whitelist based on ASA_id
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
if(file.exists(paste0("data/", ASA_id, "_network.Rda")) & !force_update) {
out <- filter_network(ASA_id = ASA_id, whitelist = whitelist,
blacklist = blacklist, min_holding = min_holding,
minimum_tx = minimum_tx,
minimum_degree = minimum_degree)
return(out)
}
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores)
out <- build_network(df = df, blacklist = blacklist, whitelist = whitelist,
decimal = decimal, ASA_id = ASA_id, ncores = ncores)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
return(out)
}
#Function to add most up to date transactions to transaction network
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
edges <- out[[2]]
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build
ASA_id = ASA_id)
}
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"Akita Inu (AKITA)",
"AlgoMeow (MEOW)",
"Svansy Coin (SVANSY)", "MoonX (MOONX)",
"Matrix (MTRX)",
"CryptoRulesEverythingAroundMe (CREAM)"),
asa_id = c(432975976, 478549868, 384303832,
361806984, 388502764, 404719435,
234994096, 312412702),
decimal = c(3, 0, 0, 0, 6,5, 0, 6),
min_holding = c(200000, 10000, 100, 100000, 10000000, 100000, 10000000, 10000),
minimum_tx = c(10, 10, 10, 10, 10, 10, 10, 10))
out = create_network()
nodes_init <- out[[1]]
edges_init <- out[[2]]
ledges <- data.frame(color = c("red", "black"),
label = c("ASA", "Algo"), arrows =c("to"),
font.size = c(16),
width = 4, length = 10)
g_init <- out[[3]]
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build
ASA_id = ASA_id)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
View(out)
new_nodes <- out[[1]]
new_edges <- out[[2]]
View(new_edges)
View(out)
nodes$status <- "old"
nodes <- out[[1]]
nodes$status <- "old"
edges <- out[[2]]
edges$status <- "old"
new_nodes$status = "new"
new_edges$status = "new"
nodes <- bind_rows(nodes, new_nodes)
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
nodes$status <- "old"
edges <- out[[2]]
edges$status <- "old"
#bind the new and old nodes together
new_nodes <- out[[1]]
new_nodes$status = "new"
new_edges <- out[[2]]
new_edges$status = "new"
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]]
new_nodes$status = "new"
new_edges <- out[[2]]
new_edges$status = "new"
nodes <- bind_rows(nodes, new_nodes)
View(nodes)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
nodes <- bind_rows(nodes, new_nodes)
edges <- bind_rows(edges, new_edges) #%>%
View(edges)
View(new_edges)
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
edges <- bind_rows(edges, new_edges) #%>%
View(edges)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
edges$value <- scale(edges$amount)[1:nrow(edges)]
View(edges)
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
edges$status <- "old"
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
new_edges$status = "new"
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
#Function to add most up to date transactions to transaction network
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
edges$status <- "old"
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
new_edges$status = "new"
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
rm(list = ls())
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i, "_network.Rda"))) {
update_network(ASA_id = asa_i, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"AlgoMeow (MEOW)",
"Svansy Coin (SVANSY)", "MoonX (MOONX)",
"Matrix (MTRX)",
"CryptoRulesEverythingAroundMe (CREAM)"),
asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
234994096, 312412702),
decimal = c(3, 0, 0, 6,5, 0, 6),
min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
update_networks(asa_index = asa_index, ncores = 6)
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
update_networks(asa_index = asa_index, ncores = 6)
warnings()
#Function to add most up to date transactions to transaction network
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
edges$status <- "old"
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
new_edges$status = "new"
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
update_network(ncores = 4)
ASA_id = "432975976"
decimal = 3
blacklist =  "data/blacklist.csv"
quick_build = TRUE
ncores = 1
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
edges$status <- "old"
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#Function to add most up to date transactions to transaction network
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
ungroup()
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
update_network(ncores = 4)
rm(list = ls())
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"AlgoMeow (MEOW)",
"Svansy Coin (SVANSY)", "MoonX (MOONX)",
"Matrix (MTRX)",
"CryptoRulesEverythingAroundMe (CREAM)"),
asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
234994096, 312412702),
decimal = c(3, 0, 0, 6,5, 0, 6),
min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
update_networks(asa_index = asa_index, ncores = 6)
i = 7
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
quick_build = "TRUE"
quick_build = TRUE
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"AlgoMeow (MEOW)",
"Svansy Coin (SVANSY)", "MoonX (MOONX)",
"Matrix (MTRX)",
"CryptoRulesEverythingAroundMe (CREAM)"),
asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
234994096, 312412702),
decimal = c(3, 0, 0, 6,5, 0, 6),
min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
ncores = 4
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
shiny::runApp()
#Function to add most up to date transactions to transaction network-
#this should run in a few minutes or less compared to hours for a full download
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
#load current network
load(paste0("data/", ASA_id, "_network.Rda"))
#extract current nodes and edges
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
#get all transactions for the ASA since the last known round
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
#do all the required post-processing and additional steps to create networks from all transactions since the last known round.
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
ungroup()
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
library(visNetwork)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
