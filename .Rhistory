whitelist = "./data/whitelist.csv"
blacklist =  "./data/blacklist.csv
""
blacklist =  "./data/blacklist.csv"
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
df <- load(file = "./data/USSR_tx_all.Rda")
minimum_tx = 10000000
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver)
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver)
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
df <- load(file = "./data/USSR_tx_all.Rda")
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
load(file = "./data/USSR_tx_all.Rda")
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver)
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, amount > minimum_tx)
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
nodes <- data.frame(id = id) %>%
mutate(wallet_status =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"))
id = unique(c(edges$from, edges$to))
blacklisted = ifelse(id %in% blacklist, TRUE, FALSE)
possible_blacklist = ifelse(id %in% possible_blacklist, TRUE, FALSE)
nodes <- data.frame(id = id) %>%
mutate(wallet_status =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"))
View(nodes)
table(wallet_status)
table(nodes$wallet_status)
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, amount > minimum_tx)
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
nodes <- data.frame(id = id) %>%
mutate(wallet_status =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"))
table(nodes$wallet_status)
visEdges
visEdges()
library(visNetwork)
library(visNetwork)
visEdges()
?visEdges
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
rm(list = ls())
shiny::runApp()
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
View(nodes_init_USSR)
rm(list = ls())
shiny::runApp()
View(nodes_init_USSR)
runApp()
runApp()
table(nodes_init_USSR$group)
View(edges_init_USSR)
View(nodes_init_USSR)
load(file = "./data/USSR_tx_all.Rda")
out <- init_network(df = df)
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
blacklist =  "./data/blacklist.csv"
whitelist = "./data/whitelist.csv"
minimum_tx = 10000000
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
View(edges_init_USSR)
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist)
View(possible_blacklist)
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist. !(from %in% whitelist | to %in% whitelist))
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, !(from %in% whitelist | to %in% whitelist))
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
rm(list = ls())
shiny::runApp()
library(shiny)
library(visNetwork)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
# Define server logic required to draw
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)", "AlgoMeow (Meow)"),
asa_id = c(43297597, 361806984))
View(asa_index)
runApp()
out[[1]]
out[[2]]
id = "Commie Coin (USSR)"
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
#construct network for asa_id-  need to cache this I would think
df = get_all_tx(ASA_id = id)
id_df = asa_index %>% filter(asa_name == id)
id = id_df$asa_id
#construct network for asa_id-  need to cache this I would think
df = get_all_tx(ASA_id = id)
ASA_id = id
tmp <- tempfile()
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?currency-greater-than=10000'), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
View(page)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
shiny::runApp()
runApp()
ASA_id = 361806984
tmp <- tempfile()
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?currency-greater-than=10000'), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list <- list()
i = 1
df_list[[i]] <- page[[3]] #get the first one going
while(nrow(page[[3]]) == 1000) { #1000 is the max per page
i <- i + 1
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?next=', page[[2]]), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list[[i]] <- page[[3]]
}
df <- bind_rows(df_list)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda"))) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network()
paste0("./data/", ASA_id, "_network.Rda")
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda"))) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, file = paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network()
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, file = paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network()
create_network(force_update = TRUE)
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "361806984",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, file = paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network(ASA_id = "361806984", whitelist = "./data/whitelist_algomeow.csv", minimum_tx = 10000)
library(igraph)
ASA_id = "432975976"
blacklist =  "data/blacklist.csv"
whitelist = "data/whitelist.csv"
432975976
if(file.exists(paste0("data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("data/", ASA_id, "_network.Rda"))
return(out)
}
force_update = TRUE
if(file.exists(paste0("data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("data/", ASA_id, "_network.Rda"))
return(out)
}
whitelist <- read.csv(file = paste0("data/", ASA_id, "_whitelist.csv"))
df <- get_all_tx(ASA_id = ASA_id)
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
library(igraph)
df <- get_all_tx(ASA_id = ASA_id)
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
#define whitelist based on ASA_id
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
minimum_tx = 10000000
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, !(from %in% whitelist | to %in% whitelist))
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
id = unique(c(edges$from, edges$to))
nodes <- data.frame(id = id) %>%
mutate(group =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"),) %>%
filter(!(id %in% whitelist))
View(edges)
edges %>% select(edges, from, to)
edges <- edges %>% select( from, to)
View(edges)
edges <- edges %>% select(from, to) %>% as.matrix()
View(edges)
g <- igraph::graph_from_edgelist(edges)
igraph::V(g)
degree <- igraph::degree(g)
degree
degree_df <- data.frame(id = names(degree), degree = degree)
View(degree_df)
nodes <- left_join(nodes, degree_df)
View(nodes)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
rm(list=ls())
shiny::runApp()
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
library(igraph)
get_all_tx <- function(ASA_id = "432975976") {
tmp <- tempfile()
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?currency-greater-than=10000'), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list <- list()
i = 1
df_list[[i]] <- page[[3]] #get the first one going
while(nrow(page[[3]]) == 1000) { #1000 is the max per page
i <- i + 1
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?next=', page[[2]]), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list[[i]] <- page[[3]]
}
df <- bind_rows(df_list)
return(df)
}
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
init_network <- function(df, blacklist =  "data/blacklist.csv",
whitelist = "data/whitelist.csv",
minimum_tx = 10000000,
min_holding,
decimal,
minimum_degree, ASA_id) {
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
filter(!(from %in% whitelist), !(to %in% whitelist)) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist)
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
id = unique(c(edges$from, edges$to))
#compute the holding using the API
nodes <-
compute_holdings(decimal = decimal, min_holding = min_holding,
ASA_id = ASA_id) %>%
mutate(group =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean")) %>%
filter(!(id %in% whitelist))
edges <- edges %>% filter(from %in% nodes$id & to %in% nodes$id)
#add some key variables
nodes <- compute_degree(nodes, edges) %>%
mutate(degree = ifelse(is.na(degree), 0, degree))
#only keep nodes w/ a certain minimum degree
nodes <- nodes %>% filter(degree >= minimum_degree)
return(list(nodes, edges))
}
#function to compute the degree of everything
compute_degree <- function(nodes, edges) {
#compute g and get the degree of every node
edges <- edges %>% select(from, to) %>% as.matrix()
g <- igraph::graph_from_edgelist(edges)
degree <- igraph::degree(g)
degree_df <- data.frame(id = names(degree), degree = degree)
nodes <- left_join(nodes, degree_df)
return(nodes)
}
compute_holdings <- function(ASA_id, min_holding = 10000, decimal = 3) {
tmp <- tempfile()
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/balances?'), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list <- list()
df_list[[1]] <- page[[1]]
i = 1
while(nrow(page[[1]]) == 1000) { #1000 is the max per page
i <- i + 1
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/balances?next=', page[[3]]), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list[[i]] <- page[[1]]
}
balances <- bind_rows(df_list)
balances$amount <- balances$amount/(10^decimal)
balances <- balances %>% filter(amount > min_holding) %>%
select(address, amount) %>% rename(id = address)
nodes <- balances %>% mutate(value = amount)
return(nodes)
}
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
decimal = 3,
min_holding = 100000,
blacklist =  "data/blacklist.csv",
minimum_tx = 10000000,
minimum_degree = 2,
force_update = FALSE) {
if(file.exists(paste0("data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("data/", ASA_id, "_network.Rda"))
return(out)
}
#define whitelist based on ASA_id
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx, min_holding = min_holding,
decimal = decimal,
minimum_degree = minimum_degree, ASA_id = ASA_id)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
return(out)
}
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)", "AlgoMeow (MEOW)"),
asa_id = c(432975976, 361806984))
#out = create_network()
out = create_network(minimum_degree = 1, minimum_tx = 10000,
min_holding= 0, force_update = TRUE)
out = create_network(ASA_id = "361806984", decimal = 0, force_update = TRUE,
minimum_tx = 50, min_holding = 0, minimum_degree = 1)
nodes_init <- out[[1]]
edges_init <- out[[2]]
shiny::runApp()
runApp()
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp()
?visOptions
runApp()
runApp()
runApp()
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp()
runApp()
runApp()
runApp()
runApp()
?visEvents
library(shiny)
library(visNetwork)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
runApp()
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
runApp()
runApp()
?visNetworkProxy
runApp()
?visUpdateNodes
runApp()
runApp()
runApp()
