nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
update_network(ncores = 4)
ASA_id = "432975976"
decimal = 3
blacklist =  "data/blacklist.csv"
quick_build = TRUE
ncores = 1
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
edges$status <- "old"
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round))
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#Function to add most up to date transactions to transaction network
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
load(paste0("data/", ASA_id, "_network.Rda"))
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
ungroup()
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
update_network(ncores = 4)
rm(list = ls())
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"AlgoMeow (MEOW)",
"Svansy Coin (SVANSY)", "MoonX (MOONX)",
"Matrix (MTRX)",
"CryptoRulesEverythingAroundMe (CREAM)"),
asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
234994096, 312412702),
decimal = c(3, 0, 0, 6,5, 0, 6),
min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
update_networks(asa_index = asa_index, ncores = 6)
i = 7
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
quick_build = "TRUE"
quick_build = TRUE
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"AlgoMeow (MEOW)",
"Svansy Coin (SVANSY)", "MoonX (MOONX)",
"Matrix (MTRX)",
"CryptoRulesEverythingAroundMe (CREAM)"),
asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
234994096, 312412702),
decimal = c(3, 0, 0, 6,5, 0, 6),
min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
ncores = 4
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
shiny::runApp()
#Function to add most up to date transactions to transaction network-
#this should run in a few minutes or less compared to hours for a full download
update_network <- function(ASA_id = "432975976",
decimal = 3,
blacklist =  "data/blacklist.csv",
ncores = 1, quick_build = TRUE) {
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
#load current network
load(paste0("data/", ASA_id, "_network.Rda"))
#extract current nodes and edges
nodes <- out[[1]]
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
#get all transactions for the ASA since the last known round
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
#do all the required post-processing and additional steps to create networks from all transactions since the last known round.
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id))
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
ungroup()
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
}
library(visNetwork)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
source("G:/My Drive/blockrank/botrank/utils/algo_utils.R")
nodes <- nodes_init
ids <- nodes$id
i = 1
#download string for the algoexplorer api
curl_download(paste0("https://algoindexer.algoexplorerapi.io/v2/accounts/",
ids[i], "?include-all=true"),
tmp)
tmp <- tempfile()
#download string for the algoexplorer api
curl_download(paste0("https://algoindexer.algoexplorerapi.io/v2/accounts/",
ids[i], "?include-all=true"),
tmp)
page <- read_json(tmp, simplifyVector = TRUE)
View(page)
page[[1]]
assets <- page[[1]]$assets
View(assets)
num_assets[i] <- nrow(assets)
#function to get the number of assets a given wallet is opted into
get_num_assets <- function(nodes) {
tmp <- tempfile()
ids <- nodes$id
num_assets <- vector(mode = "numeric", length = length(ids))
for(i in 1:length(ids)) {
#download string for the algoexplorer api
curl_download(paste0("https://algoindexer.algoexplorerapi.io/v2/accounts/",
ids[i], "?include-all=true"),
tmp)
page <- read_json(tmp, simplifyVector = TRUE)
assets <- page[[1]]$assets
num_assets[i] <- nrow(assets)
}
}
#function to get the number of assets a given wallet is opted into
get_num_assets <- function(nodes) {
tmp <- tempfile()
ids <- nodes$id
num_assets <- vector(mode = "numeric", length = length(ids))
for(i in 1:length(ids)) {
#download string for the algoexplorer api
curl_download(paste0("https://algoindexer.algoexplorerapi.io/v2/accounts/",
ids[i], "?include-all=true"),
tmp)
page <- read_json(tmp, simplifyVector = TRUE)
assets <- page[[1]]$assets
num_assets[i] <- nrow(assets)
}
nodes$num_assets <- num_assets
return(nodes)
}
nodes <- get_num_assets(nodes)
View(nodes)
View(page)
View(page)
round <- page$account$`created-at-round`
View(page)
View(page)
current_round <- page[[2]]
View(page)
current_date <- Sys.time()
#generate time since creation
wallet_age <- current_round - round * 4.5
#generate time since creation
wallet_age <- (current_round - round) * 4.5
#generate time since creation
wallet_age <- ((current_round - round) * 4.5)/ 60
#generate time since creation
wallet_age <- ((current_round - round) * 4.5)/ 60 / 24
#generate time since creation
wallet_age <- ((current_round - round) * 4.5)/ 60 / 60
#generate time since creation
wallet_age <- ((current_round - round) * 4.5)/ 60 / 60 / 24
get_wallet_age <- function(page) {
#get round where wallet was created
round <- page$account$`created-at-round`
#get current date
current_round <- page[[2]]
#generate time since creation in days
wallet_age <- ((current_round - round) * 4.5)/ 60 / 60 / 24
}
#function to get the number of assets a given wallet is opted into and the wallet age
get_wallet_info <- function(nodes) {
tmp <- tempfile()
ids <- nodes$id
num_assets <- vector(mode = "numeric", length = length(ids))
wallet_age <- vector(mode = "numeric", length = length(ids))
for(i in 1:length(ids)) {
#download string for the algoexplorer api
curl_download(paste0("https://algoindexer.algoexplorerapi.io/v2/accounts/",
ids[i], "?include-all=true"),
tmp)
page <- read_json(tmp, simplifyVector = TRUE)
assets <- page[[1]]$assets
num_assets[i] <- nrow(assets)
wallet_age[i] <- get_wallet_age(page)
}
nodes$num_assets <- num_assets
nodes$wallet_age <- wallet_age
return(nodes)
}
nodes <- get_wallet_info(nodes)
View(nodes)
rm(list = ls())
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
#
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
#                                    234994096, 312412702),
#                         decimal = c(3, 0, 0, 6,5, 0, 6),
#                         min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)"),
asa_id = c(432975976, 478549868),
decimal = c(3, 0),
min_holding = c(200000, 10000))
pick_chain("algo")
update_networks(asa_index = asa_index, ncores = 6)
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils/utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
#
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
#                                    234994096, 312412702),
#                         decimal = c(3, 0, 0, 6,5, 0, 6),
#                         min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)"),
asa_id = c(432975976, 478549868),
decimal = c(3, 0),
min_holding = c(200000, 10000))
pick_chain("algo")
update_networks(asa_index = asa_index, ncores = 6)
ASA_id <- 478549868
decimal = 0
ncores  = 4
blacklist =  "data/blacklist.csv"
quick_build = TRUE
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
#load current network
load(paste0("data/", ASA_id, "_network.Rda"))
#extract current nodes and edges
nodes <- out[[1]]
View(nodes)
if(ncol(nodes) == 7) {
nodes <- get_wallet_info(nodes)
}
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
#get all transactions for the ASA since the last known round
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
#do all the required post-processing and additional steps to create networks from all transactions since the last known round.
out <- build_network(df, decimal = decimal, blacklist = blacklist,
whitelist = whitelist, ncores = 4,
confirmed_round = last_round, quick_build = quick_build,
ASA_id = ASA_id)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id)) %>% get_wallet_info()
#function to get the number of assets a given wallet is opted into and the wallet age
get_wallet_info <- function(nodes) {
if(nrow(nodes) == 0) {
return(nodes)
}
tmp <- tempfile()
ids <- nodes$id
num_assets <- vector(mode = "numeric", length = length(ids))
wallet_age <- vector(mode = "numeric", length = length(ids))
for(i in 1:length(ids)) {
#download string for the algoexplorer api
curl_download(paste0("https://algoindexer.algoexplorerapi.io/v2/accounts/",
ids[i], "?include-all=true"),
tmp)
page <- read_json(tmp, simplifyVector = TRUE)
assets <- page[[1]]$assets
num_assets[i] <- nrow(assets)
wallet_age[i] <- get_wallet_age(page)
}
nodes$num_assets <- num_assets
nodes$wallet_age <- wallet_age
return(nodes)
}
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id)) %>% get_wallet_info()
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
nodes <- bind_rows(nodes, new_nodes)
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
ungroup()
edges$value <- scale(edges$amount)[1:nrow(edges)]
edges_mat <- edges %>% select(from,to) %>% as.matrix()
#remake the graph g from the new edges
g <- igraph::graph_from_edgelist(edges_mat, directed = FALSE)
out <- list(nodes, edges, g)
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
library(visNetwork)
shiny::runApp()
View(nodes)
View(nodes)
runApp()
?visInteraction
runApp()
rm(list = ls(
))
shiny::runApp()
?visEvents
runApp()
visDocumentation()
View(nodes_init)
runApp()
source("G:/My Drive/blockrank/botrank/utils/eth_utils.R")
rm(list = ls())
shiny::runApp()
runApp()
View(nodes_init)
shiny::runApp()
