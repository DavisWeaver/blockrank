update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
#
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
#                                    234994096, 312412702),
#                         decimal = c(3, 0, 0, 6,5, 0, 6),
#                         min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)",
#                                      "Parsec (PRSC)",
#                                      "Parsec AU (PRSCau)",
#                                      "LOUDefi (LOUD)"),
#                         asa_id = c(432975976, 478549868, 361806984, 312412702,
#                                    415045633, 546713076, 457819394),
#                         decimal = c(3, 0, 0, 6, 0, 6, 6),
#                         min_holding = c(200000, 10000, 10000, 10000, 10000, 10000, 10000),
#                         minimum_tx = c(0,0,0,0,0,0,0))
asa_index <- data.frame(asa_name = c( "LOUDefi (LOUD)"),
asa_id = c(457819394),
decimal = c(6),
min_holding = c(10000),
minimum_tx = c(0))
pick_chain("algo")
update_networks(asa_index = asa_index, ncores = 6)
warnings()
shiny::runApp()
runApp()
runApp()
rm(list = ls())
shiny::runApp()
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils/utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
#
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
#                                    234994096, 312412702),
#                         decimal = c(3, 0, 0, 6,5, 0, 6),
#                         min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)",
#                                      "Parsec (PRSC)",
#                                      "Parsec AU (PRSCau)",
#                                      "LOUDefi (LOUD)"),
#                         asa_id = c(432975976, 478549868, 361806984, 312412702,
#                                    415045633, 546713076, 457819394),
#                         decimal = c(3, 0, 0, 6, 0, 6, 6),
#                         min_holding = c(200000, 10000, 10000, 10000, 10000, 10000, 10000),
#                         minimum_tx = c(0,0,0,0,0,0,0))
pick_chain("algo")
asa_index <- data.frame(asa_name = c( "LOUDefi (LOUD)"),
asa_id = c(457819394),
decimal = c(6),
min_holding = c(10000),
minimum_tx = c(0))
update_networks(asa_index = asa_index, ncores = 6)
runApp()
brary(shiny)
library(visNetwork)
rm(list = ls())
shiny::runApp()
runApp()
?searchinput
library(shiny)
library(visNetwork)
?searchInput
install.packages('shinywidgets')
install.packages('shinyWidgets')
library(shinyWidgets)
?searchInput
runApp()
runApp()
runApp()
?visSelectNodes
runApp()
runApp()
asa_index <- data.frame(asa_name = c( "LOUDefi (LOUD)"),
asa_id = c(457819394),
decimal = c(6),
min_holding = c(10000),
minimum_tx = c(0))
ASA_id = 457819394
decimal = 6
View(asa_index)
blacklist =  "data/blacklist.csv"
ncores = 6
quick_build = TRUE
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
#load current network
load(paste0("data/", ASA_id, "_network.Rda"))
#extract current nodes and edges
nodes <- out[[1]]
if(ncol(nodes) %in% c(6,7)) {
nodes <- get_wallet_info(nodes)
}
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#grab the last known round
last_round <- max(edges$confirmed_round, na.rm = TRUE)
#get all transactions for the ASA since the last known round
df <- get_all_tx(ASA_id = ASA_id, ncores = ncores, confirmed_round = last_round)
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
#if we already did some of the cleaning in init_network
if(ncol(df) != 7) {
df <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender, confirmed_round) %>%
unnest(cols = c(asset_transfer_transaction))
}
#finish the cleaning
edges <- df %>%
mutate(amount = amount/(10^decimal)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
mutate(ASA_id = ASA_id,
color = "red")
edges$value <- scale(edges$amount)[1:nrow(edges)]
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist)
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
id = unique(c(edges$from, edges$to))
#compute the holding using the API
nodes <-
compute_holdings(decimal = decimal,
ASA_id = ASA_id) %>%
mutate(group =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
id %in% whitelist ~ "whitelist",
TRUE ~ "clean"),
label = group)
View(nodes)
scammer = data.frame(id = 'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI', amount = 0, value = 0, group = "blacklist", label = "blacklist")
nodes = bind_rows(nodes, scammer)
nodes2 <- nodes %>% filter(id %in% edges$from | id %in% edges$to)
nodes <- nodes %>% filter(id %in% edges$from | id %in% edges$to)
nodes = bind_rows(nodes, scammer)
#compute the algo edges --> this takes a minute
edges <- compute_algo_edges(nodes = nodes, edges = edges, ncores = ncores,
whitelist = whitelist, confirmed_round = 1)
#add some key variables
#add a font size column to the node df to hide labels
nodes$font.size <- 0
nodes <- get_wallet_info(nodes)
#get an igraph g
g <- compute_g(edges)
out = list(nodes, edges, g)
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id)) #%>% get_wallet_info()
out = out2
out2 = out
load(paste0("data/", ASA_id, "_network.Rda"))
#extract current nodes and edges
nodes <- out[[1]]
if(ncol(nodes) %in% c(6,7)) {
nodes <- get_wallet_info(nodes)
}
edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
out = out2
#bind the new and old nodes together
new_nodes <- out[[1]] %>% filter(!(id %in% nodes$id)) #%>% get_wallet_info()
View(new_nodes)
View(new_nodes)
View(new_nodes)
'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI' %in% nodes$id
nodes <- bind_rows(new_nodes, nodes)
new_edges <- out[[2]] %>%
mutate(ASA_id = as.numeric(ASA_id))
#re-do the processing to incorporate the new transactions
edges <- bind_rows(edges, new_edges) %>%
group_by(from, to, ASA_id, color) %>%
summarise(amount = sum(amount),
confirmed_round = max(confirmed_round)) %>%
ungroup()
edges$value <- scale(edges$amount)[1:nrow(edges)]
g <- compute_g(edges)
out <- list(nodes, edges, g)
'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI' %in% nodes$id
'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI' %in% edges$from
'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI' %in% edges$to
save(out, file = paste0("data/", ASA_id, "_network.Rda"))
runApp()
edges <- filter(edges, !(from %in% nodes$id) & !(to %in% nodes$id))
View(edges)
'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI' %in% edges$to
'FCEVZ36JNJWDLQPO26KDCQCFTRF5DACHYZ4A4532CAYOQXKLDI4SVMXYZI' %in% edges$from
View(nodes)
if(file.exists(paste0("data/", ASA_id, "_network.Rda"))) {
load(paste0("data/", ASA_id, "_network.Rda"))
} else {
stop("ASA_id not found")
}
edges <- out[[2]]
#Load the blacklist and whitelist
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
#recalculate degree for the new edges
#also configure the long label
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree) %>%
mutate(font.size = 0,
wallet_age = round(wallet_age),
label_long = paste0("Number of Assets: ", num_assets,
" \n Wallet age: ", wallet_age, " days"))
#recalculate degree for the new edges
#also configure the long label
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree) %>%
mutate(font.size = 0,
wallet_age = round(wallet_age),
label_long = paste0("Number of Assets: ", num_assets,
" \n Wallet age: ", wallet_age, " days"))
minimum_degree = 0
#recalculate degree for the new edges
#also configure the long label
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree) %>%
mutate(font.size = 0,
wallet_age = round(wallet_age),
label_long = paste0("Number of Assets: ", num_assets,
" \n Wallet age: ", wallet_age, " days"))
View(nodes)
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black")
minimum_tx = 0
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black")
#recalculate degree for the new edges
#also configure the long label
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree) %>%
mutate(font.size = 0,
wallet_age = round(wallet_age),
label_long = paste0("Number of Assets: ", num_assets,
" \n Wallet age: ", wallet_age, " days"))
View(nodes)
if(file.exists(paste0("data/", ASA_id, "_network.Rda"))) {
load(paste0("data/", ASA_id, "_network.Rda"))
} else {
stop("ASA_id not found")
}
nodes <- out[[1]]
edges <- out[[2]]
#Load the blacklist and whitelist
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
nodes <- nodes %>%
filter(!(id %in% whitelist),
amount > min_holding)
min_holding = 0
if(file.exists(paste0("data/", ASA_id, "_network.Rda"))) {
load(paste0("data/", ASA_id, "_network.Rda"))
} else {
stop("ASA_id not found")
}
nodes <- out[[1]]
edges <- out[[2]]
#Load the blacklist and whitelist
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
nodes <- nodes %>%
filter(!(id %in% whitelist),
amount > min_holding)
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black",
from %in% nodes$id & to %in% nodes$id)
#recalculate degree for the new edges
#also configure the long label
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree) %>%
mutate(font.size = 0,
wallet_age = round(wallet_age),
label_long = paste0("Number of Assets: ", num_assets,
" \n Wallet age: ", wallet_age, " days"))
g <- compute_g(edges)
View(nodes)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pick_chain("algo")
source("G:/My Drive/blockrank/botrank/utils/update_networks.R", echo=TRUE)
shiny::runApp()
runApp()
ASA_id = 478549868
#define whitelist based on ASA_id
whitelist <- paste0("data/", ASA_id, "_whitelist.csv")
min_holding= 0
minimum_tx = 0
minimum_degree = 1
blacklist =  "data/blacklist.csv"
if(file.exists(paste0("data/", ASA_id, "_network.Rda"))) {
load(paste0("data/", ASA_id, "_network.Rda"))
} else {
stop("ASA_id not found")
}
nodes <- out[[1]]
edges <- out[[2]]
'JOZKPELIRYZGFQQWWFOZ4MJQMO7V52BJ435VVJ2FAXT54HA5KRDJIOXGKU' %in% nodes$id
View(nodes)
'PGWM5COFUGON4RWXI57YBLZQISNWKVCBRIEVUZDXZWSGPZH2LHJTHA4ABI' %in% nodes$id
#Load the blacklist and whitelist
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
whitelist
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black",
from %in% nodes$id & to %in% nodes$id)
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
library(igraph)
library(lubridate)
library(foreach)
nodes <- nodes %>%
filter(!(id %in% whitelist),
amount > min_holding)
'PGWM5COFUGON4RWXI57YBLZQISNWKVCBRIEVUZDXZWSGPZH2LHJTHA4ABI' %in% nodes$id
'JOZKPELIRYZGFQQWWFOZ4MJQMO7V52BJ435VVJ2FAXT54HA5KRDJIOXGKU' %in% nodes$id
nodes <- out[[1]]
nodes
nodes <- nodes %>%
filter(!(id %in% whitelist),
amount >= min_holding)
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black",
from %in% nodes$id & to %in% nodes$id)
nodes <- nodes %>%
filter(!(id %in% whitelist),
amount >= min_holding)
'JOZKPELIRYZGFQQWWFOZ4MJQMO7V52BJ435VVJ2FAXT54HA5KRDJIOXGKU' %in% nodes$id
edges <- edges %>%
filter(!(from %in% whitelist), !(to %in% whitelist),
amount > minimum_tx & color == "red" | color == "black",
from %in% nodes$id & to %in% nodes$id)
#recalculate degree for the new edges
#also configure the long label
nodes <- compute_degree(nodes, edges) %>%
filter(degree >= minimum_degree) %>%
mutate(font.size = 0,
wallet_age = round(wallet_age),
label_long = paste0("Number of Assets: ", num_assets,
" \n Wallet age: ", wallet_age, " days"))
View(nodes)
shiny::runApp()
rm(list = ls())
library(foreach)
library(dplyr)
library(curl)
library(jsonlite)
library(magrittr)
library(janitor)
library(tidyr)
library(igraph)
source("utils/utils.R")
update_networks <- function(asa_index, ncores, quick_build = TRUE) {
out <- foreach(i = 1:nrow(asa_index),
.packages = c("dplyr", "magrittr", "igraph", "tidyr",
"janitor", "jsonlite", "curl"),
.export = c("create_network", "get_all_tx", "init_network",
"compute_degree", "compute_holdings",
"generate_daterange")) %do%
{
asa_i <- slice(asa_index, i)
if(file.exists(paste0("data/", asa_i$asa_id, "_network.Rda"))) {
update_network(ASA_id = asa_i$asa_id, decimal = asa_i$decimal, ncores = ncores,
quick_build = quick_build)
} else {
out = create_network(ASA_id = asa_i$asa_id, force_update = TRUE,
decimal = asa_i$decimal, ncores = ncores)
return(NULL)
}
}
}
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)","BirdBot (BIRDS)",
#                                      "Akita Inu (AKITA)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)", "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 384303832, 361806984, 388502764, 404719435, 234994096, 312412702),
#                         decimal = c(3,0, 0, 0, 6,5, 0, 6))
#
# asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
#                                      "BirdBot (BIRDS)",
#                                      "AlgoMeow (MEOW)",
#                                      "Svansy Coin (SVANSY)", "MoonX (MOONX)",
#                                      "Matrix (MTRX)",
#                                      "CryptoRulesEverythingAroundMe (CREAM)"),
#                         asa_id = c(432975976, 478549868, 361806984, 388502764, 404719435,
#                                    234994096, 312412702),
#                         decimal = c(3, 0, 0, 6,5, 0, 6),
#                         min_holding = c(200000, 10000, 100000, 10000000, 100000, 10000000, 10000))
pick_chain("algo")
# asa_index <- data.frame(asa_name = c( "BirdBot (BIRDS)"),
#                         asa_id = c(478549868),
#                         decimal = c(0),
#                         min_holding = c(10000),
#                         minimum_tx = c(0))
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)",
"BirdBot (BIRDS)",
"AlgoMeow (MEOW)",
"CryptoRulesEverythingAroundMe (CREAM)",
"Parsec (PRSC)",
"Parsec AU (PRSCau)",
"LOUDefi (LOUD)"),
asa_id = c(432975976, 478549868, 361806984, 312412702,
415045633, 546713076, 457819394),
decimal = c(3, 0, 0, 6, 0, 6, 6),
min_holding = c(200000, 10000, 10000, 10000, 10000, 10000, 10000),
minimum_tx = c(0,0,0,0,0,0,0))
update_networks(asa_index = asa_index, ncores = 6)
shiny::runApp()
shiny::runApp()
