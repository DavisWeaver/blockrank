whitelist = "./data/whitelist.csv"
blacklist =  "./data/blacklist.csv
""
blacklist =  "./data/blacklist.csv"
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
df <- load(file = "./data/USSR_tx_all.Rda")
minimum_tx = 10000000
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver)
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver)
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
df <- load(file = "./data/USSR_tx_all.Rda")
#df <- get_all_tx()
#save(df, file = "./data/USSR_tx_all.Rda")
load(file = "./data/USSR_tx_all.Rda")
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver)
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, amount > minimum_tx)
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
nodes <- data.frame(id = id) %>%
mutate(wallet_status =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"))
id = unique(c(edges$from, edges$to))
blacklisted = ifelse(id %in% blacklist, TRUE, FALSE)
possible_blacklist = ifelse(id %in% possible_blacklist, TRUE, FALSE)
nodes <- data.frame(id = id) %>%
mutate(wallet_status =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"))
View(nodes)
table(wallet_status)
table(nodes$wallet_status)
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, amount > minimum_tx)
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
#exclude whitelist and original blacklist to make this a unique identifier
possible_blacklist <- possible_blacklist[!(possible_blacklist %in% blacklist) & !(possible_blacklist %in% whitelist)]
nodes <- data.frame(id = id) %>%
mutate(wallet_status =
case_when(id %in% blacklist ~ "blacklist",
id %in% possible_blacklist ~ "suspicious",
TRUE ~ "clean"))
table(nodes$wallet_status)
visEdges
visEdges()
library(visNetwork)
library(visNetwork)
visEdges()
?visEdges
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
rm(list = ls())
shiny::runApp()
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
View(nodes_init_USSR)
rm(list = ls())
shiny::runApp()
View(nodes_init_USSR)
runApp()
runApp()
table(nodes_init_USSR$group)
View(edges_init_USSR)
View(nodes_init_USSR)
load(file = "./data/USSR_tx_all.Rda")
out <- init_network(df = df)
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
library(curl)
library(jsonlite)
library(magrittr)
library(dplyr)
library(janitor)
library(tidyr)
blacklist =  "./data/blacklist.csv"
whitelist = "./data/whitelist.csv"
minimum_tx = 10000000
blacklist <- read.csv(blacklist)$Addresses
whitelist <- read.csv(whitelist)$Addresses
edges <- df %>%
clean_names() %>%
select(asset_transfer_transaction, sender) %>%
unnest(cols = c(asset_transfer_transaction)) %>%
rename(from = sender,
to = receiver) %>%
group_by(from, to) %>%
summarise(amount = sum(amount)) %>%
filter(amount > minimum_tx) %>%
mutate(width = log10(amount))
View(edges_init_USSR)
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist)
View(possible_blacklist)
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist. !(from %in% whitelist | to %in% whitelist))
#create a possible blacklist based on nodes that transact with the actual blacklist
possible_blacklist <- edges %>%
filter(from %in% blacklist | to %in% blacklist, !(from %in% whitelist | to %in% whitelist))
#grab a possible blacklist of all wallets with a transaction including the banned wallets
possible_blacklist <- unique(c(possible_blacklist$from, possible_blacklist$to))
rm(list = ls())
shiny::runApp()
library(shiny)
library(visNetwork)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
# Define server logic required to draw
asa_index <- data.frame(asa_name = c("Commie Coin (USSR)", "AlgoMeow (Meow)"),
asa_id = c(43297597, 361806984))
View(asa_index)
runApp()
out[[1]]
out[[2]]
id = "Commie Coin (USSR)"
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
#construct network for asa_id-  need to cache this I would think
df = get_all_tx(ASA_id = id)
id_df = asa_index %>% filter(asa_name == id)
id = id_df$asa_id
#construct network for asa_id-  need to cache this I would think
df = get_all_tx(ASA_id = id)
ASA_id = id
tmp <- tempfile()
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?currency-greater-than=10000'), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
View(page)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
shiny::runApp()
runApp()
ASA_id = 361806984
tmp <- tempfile()
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?currency-greater-than=10000'), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list <- list()
i = 1
df_list[[i]] <- page[[3]] #get the first one going
while(nrow(page[[3]]) == 1000) { #1000 is the max per page
i <- i + 1
curl_download(paste0('https://algoexplorerapi.io/idx2/v2/assets/',
ASA_id, '/transactions?next=', page[[2]]), tmp)
page <- read_json(tmp, simplifyVector = TRUE)
df_list[[i]] <- page[[3]]
}
df <- bind_rows(df_list)
source("G:/My Drive/side_projects/cc_dashboard/botrank/utils.R")
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda"))) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network()
paste0("./data/", ASA_id, "_network.Rda")
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda"))) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, file = paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network()
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "432975976",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, file = paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network()
create_network(force_update = TRUE)
#Main Function that checks it and also the cache
create_network <- function(ASA_id = "361806984",
blacklist =  "./data/blacklist.csv",
whitelist = "./data/whitelist.csv",
minimum_tx = 10000,
force_update = FALSE) {
if(file.exists(paste0("./data/", ASA_id, "_network.Rda")) & !force_update) {
load(paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
df <- get_all_tx(ASA_id = ASA_id)
out <- init_network(df = df, blacklist = blacklist, whitelist = whitelist,
minimum_tx = minimum_tx)
save(out, file = paste0("./data/", ASA_id, "_network.Rda"))
return(out)
}
create_network(ASA_id = "361806984", whitelist = "./data/whitelist_algomeow.csv", minimum_tx = 10000)
shiny::runApp()
runApp()
